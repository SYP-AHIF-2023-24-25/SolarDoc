services:
  frontend:
    build:
      context: .
      dockerfile: ./solardoc/frontend/Dockerfile
      args:
        PUPPETEER_SKIP_DOWNLOAD: "true"
    volumes:
      - ./solardoc/frontend:/home/node/app
      - ./solardoc/frontend/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
    ports:
      - "80:80"
    environment:
      PUPPETEER_SKIP_DOWNLOAD: true
      PROD_BACKEND_PORT: ${BACKEND_PORT}
      PROD_BACKEND_HOST: ${BACKEND_HOST}
      PROD_PHOENIX_HOST: ${PHOENIX_HOST}
      PROD_PHOENIX_PORT: ${PHOENIX_PORT}
      API_BASE_PATH: ${API_BASE_PATH}
      PHX_BASE_PATH: ${PHX_BASE_PATH}
      PHX_WS_PATH: ${PHX_WS_PATH}
      NODE_ENV: production
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/" ]
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      - rest-api
      - phoenix-server
    links:
      - rest-api
  rest-api:
    build:
      context: .
      dockerfile: ./solardoc/rest-api/Dockerfile
      args:
        PUPPETEER_SKIP_DOWNLOAD: "true"
        PERSISTENT_STORAGE_PATH: ${PERSISTENT_STORAGE_PATH}
    ports:
      - "3000:3000"
    environment:
      STAGING: ${STAGING}
      API_BASE_PATH: ${API_BASE_PATH}
      REDIS_ROOT_PASSWORD: ${REDIS_ROOT_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: redis-db
      REDIS_PORT: 6379
      PERSISTENT_STORAGE_PATH: ${PERSISTENT_STORAGE_PATH}
      PUPPETEER_SKIP_DOWNLOAD: "true"
      NODE_ENV: production
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/3000; exit $?;'"
      interval: 10s
      timeout: 10s
      retries: 3
    volumes:
      - rest-api-persistent-storage:${PERSISTENT_STORAGE_PATH}
    depends_on:
      redis-db:
        condition: service_healthy
    links:
      - redis-db
  phoenix-server:
    build: solardoc/phoenix-server
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql-db:5432/${POSTGRES_DB}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      PORT: 4000
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/4000; exit $?;'"
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      postgresql-db:
        condition: service_healthy
    links:
      - postgresql-db
      - rest-api
      - redis-db
  redis-db:
    build: ./solardoc/redis-db
    ports:
      - "6379:6379"
      - "8001:8001"
    privileged: true
    volumes:
      - ./solardoc/redis-db/data:/redis/data
    environment:
      REDIS_ROOT_PASSWORD: ${REDIS_ROOT_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
  postgresql-db:
    build: ./solardoc/postgresql-db
    ports:
      - "5432:5432"
    user: "${UID}:${GID}"
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./solardoc/postgresql-db/scripts:/docker-entrypoint-initdb.d/
      - ./solardoc/postgresql-db/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 10
  postgres-adminer:
    build: ./solardoc/postgres-adminer
    ports:
      - "8081:8080"
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/8080; exit $?;'"
      interval: 10s
      timeout: 10s
      retries: 3
    environment:
      ADMINER_DESIGN: 'hydra'
volumes:
  frontend:
  rest-api-persistent-storage:
